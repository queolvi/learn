#include <vector>
std::vector<int> countBy(int x,int n){
  std::vector<int> res;
  for(size_t i = 1; i <= n; ++i) {
    res.push_back(x * i);
  }
  return res;
}

Describe(Count_By_X)
{
    It(Basic_Tests)
    {
        std::vector<int> expected = {1,2,3,4,5,6,7,8,9,10};
        Assert::That(countBy(1,10), Equals(expected));
        expected = {2,4,6,8,10};
        Assert::That(countBy(2,5), Equals(expected));
        expected = {1,2,3,4,5,6,7,8,9,10};
        Assert::That(countBy(1,10), Equals(expected));
        expected = {100,200,300,400,500};
        Assert::That(countBy(100,5), Equals(expected));
    }
};

/*
 ### Задача
Нужно создать функцию с двумя аргументами, которая возвращает массив первых `n` кратных числа `x`.  

**Условия:**
- Оба числа (`x` и `n`) — положительные целые числа > 0.
- Результат должен быть возвращён в виде массива (или списка, в зависимости от языка программирования).

### Примеры
1. `x = 1`, `n = 10` → `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`  
   (Первые 10 чисел, кратных 1 — это просто числа от 1 до 10.)

2. `x = 2`, `n = 5` → `[2, 4, 6, 8, 10]`  
   (Первые 5 чисел, кратных 2 — это чётные числа от 2 до 10.)

### Решение
1. **Создаём пустой массив** для хранения результата.
2. **Запускаем цикл от 1 до `n`** (включительно).
3. **На каждом шаге умножаем `x` на текущий номер итерации** (`i`), получая очередное кратное.
4. **Добавляем результат в массив**.
5. **Возвращаем заполненный массив**.

### Код на C++
```cpp
#include <vector>

std::vector<int> countMultiples(int x, int n) {
    std::vector<int> result;
    for (int i = 1; i <= n; ++i) {
        result.push_back(x * i);
    }
    return result;
}
```

### Пояснение к коду
1. **`std::vector<int> result`** — создаём динамический массив для хранения чисел.
2. **Цикл `for (int i = 1; i <= n; ++i)`**:
   - `i` принимает значения от 1 до `n`.
   - На каждой итерации вычисляем `x * i` (очередное кратное `x`).
3. **`result.push_back(x * i)`** — добавляем полученное число в конец массива.
4. **`return result`** — возвращаем заполненный массив.

### Пример работы
- Для `x = 3`, `n = 4`:
  - Итерация 1: `3 * 1 = 3` → `[3]`
  - Итерация 2: `3 * 2 = 6` → `[3, 6]`
  - Итерация 3: `3 * 3 = 9` → `[3, 6, 9]`
  - Итерация 4: `3 * 4 = 12` → `[3, 6, 9, 12]`
- Результат: `[3, 6, 9, 12]`

### Альтернативные варианты
1. **Использование `std::generate` (C++)**:
   ```cpp
   #include <vector>
   #include <algorithm>

   std::vector<int> countMultiples(int x, int n) {
       std::vector<int> result(n);
       std::generate(result.begin(), result.end(), [x, i = 1]() mutable { return x * i++; });
       return result;
   }
   ```
   (Более продвинутый способ, но менее читаемый.)

2. **Через математическую формулу**:
   - Кратные `x` — это арифметическая прогрессия с шагом `x`.
   - Можно сразу заполнить массив значениями `x, 2x, 3x, ..., nx`.

### Итог
Функция простая, но важно правильно понять условие:  
**"Первые `n` кратных `x`"** — это `x*1, x*2, x*3, ..., x*n`, а не, например, числа в диапазоне `[x, n*x]` с шагом `x`.
 */
